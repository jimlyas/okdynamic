{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"OkDynamic \u00b6 OkDynamic is a lightweight Okhttp interceptor that helps you to navigate through your environments. Commonly Android developers use build variant or build flavor like this: build.gradle productFlavors { create ( \"development\" ) { // Configuration for development environment } create ( \"staging\" ) { // Configuration for staging environment } create ( \"production\" ) { // Configuration for production environment } } This means you will need separate APKs if you want to test each environments. But by using this library, you can dynamically change the environment on run-time without building separate APKs.","title":"Home"},{"location":"#okdynamic","text":"OkDynamic is a lightweight Okhttp interceptor that helps you to navigate through your environments. Commonly Android developers use build variant or build flavor like this: build.gradle productFlavors { create ( \"development\" ) { // Configuration for development environment } create ( \"staging\" ) { // Configuration for staging environment } create ( \"production\" ) { // Configuration for production environment } } This means you will need separate APKs if you want to test each environments. But by using this library, you can dynamically change the environment on run-time without building separate APKs.","title":"OkDynamic"},{"location":"download/","text":"Getting Personal Access Token \u00b6 Before downloading this library, you need to configure personal access token in Github. Click here for configuring it! !!! info Store your token for later! Defining Credential \u00b6 After generating your personal access token, store it inside gradle.properties like this: gpr_user = yourgithubusername gpr_key = yourgeneratedpersonalaccesstoken Defining Repository \u00b6 Add this repository to your gradle configuration: build.gradle allProjects { repositories { maven { url = uri ( \"https://maven.pkg.github.com/jimlyas/okdynamic\" ) credentials { username = properties [ \"gpr_user\" ]. toString () // (1) password = properties [ \"gpr_key\" ]. toString () // (2) } } } } Your github username Your Personal Access Token that you generate earlier Adding Dependencies \u00b6 In your app's build.gradle , add this dependencies: build.gradle dependencies { implementation \"com.github.jimlyas:okdynamic:VERSION\" } Change VERSION to the version of the library you want to use.","title":"Download"},{"location":"download/#getting-personal-access-token","text":"Before downloading this library, you need to configure personal access token in Github. Click here for configuring it! !!! info Store your token for later!","title":"Getting Personal Access Token"},{"location":"download/#defining-credential","text":"After generating your personal access token, store it inside gradle.properties like this: gpr_user = yourgithubusername gpr_key = yourgeneratedpersonalaccesstoken","title":"Defining Credential"},{"location":"download/#defining-repository","text":"Add this repository to your gradle configuration: build.gradle allProjects { repositories { maven { url = uri ( \"https://maven.pkg.github.com/jimlyas/okdynamic\" ) credentials { username = properties [ \"gpr_user\" ]. toString () // (1) password = properties [ \"gpr_key\" ]. toString () // (2) } } } } Your github username Your Personal Access Token that you generate earlier","title":"Defining Repository"},{"location":"download/#adding-dependencies","text":"In your app's build.gradle , add this dependencies: build.gradle dependencies { implementation \"com.github.jimlyas:okdynamic:VERSION\" } Change VERSION to the version of the library you want to use.","title":"Adding Dependencies"},{"location":"implementation/","text":"Info You need to inject the OkDynamic class as singleton, use Dependency Injection tools like Dagger, Hilt, or Koin. This is the example for using Koin Initialize the class \u00b6 Initialize your Interceptor like this: KoinModule.kt single ( named ( \"okdynamic\" )) { OkDynamic . get ( Pair ( Environment . DEVELOPMENT , \"https://development.api.com\" ), Pair ( Environment . STAGING , \"https://staging.api.com\" ), Pair ( Environment . PRODUCTION , \"https://production.api.com\" ) ) } This library support three environments (Development, Staging, Production) . Change the base url based on your services. Adding the Interceptor \u00b6 In your okhttp builder, add the interceptor: OkhttpModule.kt single { OkHttpClient . Builder (). apply { readTimeout ( 2 , TimeUnit . MINUTES ) connectTimeout ( 2 , TimeUnit . MINUTES ) callTimeout ( 5 , TimeUnit . MINUTES ) addInterceptor ( get ( named ( \"okdynamic\" ))) }. build () }","title":"Implementation"},{"location":"implementation/#initialize-the-class","text":"Initialize your Interceptor like this: KoinModule.kt single ( named ( \"okdynamic\" )) { OkDynamic . get ( Pair ( Environment . DEVELOPMENT , \"https://development.api.com\" ), Pair ( Environment . STAGING , \"https://staging.api.com\" ), Pair ( Environment . PRODUCTION , \"https://production.api.com\" ) ) } This library support three environments (Development, Staging, Production) . Change the base url based on your services.","title":"Initialize the class"},{"location":"implementation/#adding-the-interceptor","text":"In your okhttp builder, add the interceptor: OkhttpModule.kt single { OkHttpClient . Builder (). apply { readTimeout ( 2 , TimeUnit . MINUTES ) connectTimeout ( 2 , TimeUnit . MINUTES ) callTimeout ( 5 , TimeUnit . MINUTES ) addInterceptor ( get ( named ( \"okdynamic\" ))) }. build () }","title":"Adding the Interceptor"},{"location":"security/","text":"Issue \u00b6 The only time you want to dynamically change Back-End's environment is when you are in development phase . You don't want your end-user to be able to do that in released product. But how do we do that using this library? Solution \u00b6 This library have two build types, and it separates the code by DEBUG and RELEASE . If you're using DEBUG build type, this library will be included with all the features. If you're using RELEASE build type, this library will do nothing and there's no code to trace back.","title":"Security"},{"location":"security/#issue","text":"The only time you want to dynamically change Back-End's environment is when you are in development phase . You don't want your end-user to be able to do that in released product. But how do we do that using this library?","title":"Issue"},{"location":"security/#solution","text":"This library have two build types, and it separates the code by DEBUG and RELEASE . If you're using DEBUG build type, this library will be included with all the features. If you're using RELEASE build type, this library will do nothing and there's no code to trace back.","title":"Solution"}]}